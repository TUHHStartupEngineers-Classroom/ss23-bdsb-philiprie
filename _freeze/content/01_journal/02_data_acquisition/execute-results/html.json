{
  "hash": "cf6c99f72dae0a0424d0e3d8e4e719ac",
  "result": {
    "markdown": "---\ntitle: \"Data Acquisition\"\nauthor: \"Philip C. Riege\"\n---\n\n\n# Challenge 2.1\nFor the first challenge of this chapter I used an open API providing information about the population numbers of the United States over the past year. I decided to plot the number of inhabitants over the years to show the development.\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-1_4ddda30f9e4f9ceaa5abe99be3b5f3d7'}\n\n```{.r .cell-code}\n#import libraries\nlibrary(tidyverse)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(RSQLite)\nlibrary(DBI)\n\n#access API\nresp <- GET(\"https://datausa.io/api/data?drilldowns=Nation&measures=Population\")\n\n#check if API responded successfully\nif (resp$status_code == 200) {\n  print(\"request has succeeded\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"request has succeeded\"\n```\n:::\n\n```{.r .cell-code}\n#extract information and form it into a tibble\nUS_data_lst <- resp %>%\n  .$content %>%\n  rawToChar() %>%\n  fromJSON()\n\ndata_lst <- US_data_lst[\"data\"]$data\ndata_tbl <- as_tibble(data_lst) %>%\n  select(Year, Population)\n\n#plot data\ndata_tbl %>%\n  ggplot(aes(x = Year, y = Population)) +\n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n  \n  # Formatting\n  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. \n  # Again, we have to adjust it for euro values\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \"\")) +\n  labs(\n    title    = \"US Population per year\",\n    x = \"\", # Override defaults for x and y\n    y = \"Inhabitants\"\n  )\n```\n\n::: {.cell-output-display}\n![](02_data_acquisition_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n# Challenge 2.2\nFor the second challenge, the goal was to create a small database of bike models (their names and prices) from one of Canyons rivaling companies, namely ROSE or Radon. Since I recently ordered a roadbike from ROSE, I went with their website. I confined myself to the category of roadbikes.\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-2_ac56ece5dc6588b1518f0804723415ad'}\n\n```{.r .cell-code}\n#import libraries\nlibrary(tidyverse) \nlibrary(rvest)     \nlibrary(glue)      \n\n#scraping rose bikes for their road bike models\nhome_url <- \"https://www.rosebikes.com\"\nurl_roadbikes <- \"https://www.rosebikes.com/bikes/road\"\n\n#get the url of every model of the category road bike\nget_urls <- function(category_url){\n  \n  html_roadbikes <- read_html(category_url)\n  \n  bike_url_tbl <- html_roadbikes %>%\n    html_nodes(css = \".catalog-category-bikes__content > a\") %>%\n    html_attr(\"href\") %>%\n    enframe(name = \"position\", value = \"url\") %>%\n    mutate(url = glue(\"{home_url}{url}\"))\n  \n  return(bike_url_tbl)\n}\n\nbike_url_tbl <- get_urls(url_roadbikes)\n\n#get the name and price of each model\nget_bike_data <- function(url){\n  \n  html_model <- read_html(url)\n  \n  names <- html_model %>%\n    html_nodes(css = \".catalog-category-model__title\") %>%\n    html_text() %>%\n    str_trim() %>%\n    enframe(name = \"position\", value = \"name\")\n  \n  prices <- html_model %>%\n    html_nodes(css = \".catalog-category-model__price-current\") %>%\n    html_text() %>%\n    str_trim() %>%\n    enframe(name = \"position\", value = \"price\")\n  \n  bike_data <- names %>%\n    left_join(prices, by = join_by(position)) %>%\n    distinct(name, price)\n  \n  return(bike_data)\n}\n\ndatabase <- map(bike_url_tbl$url, get_bike_data)\ndatabase\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [[1]]\n#> # A tibble: 12 × 2\n#>    name                    price    \n#>    <chr>                   <chr>    \n#>  1 XLITE 04 105            €2,999.00\n#>  2 XLITE 04 Ultegra        €3,299.00\n#>  3 XLITE 04 105 Di2        €3,599.00\n#>  4 XLITE 04 Ultegra Di2    €4,599.00\n#>  5 XLITE 04 Force eTap AXS €4,599.00\n#>  6 XLITE 04 Force AXS      €4,999.00\n#>  7 XLITE 06 Ultegra        €3,999.00\n#>  8 XLITE 06 Ultegra Di2    €5,999.00\n#>  9 XLITE 06 Force eTap AXS €5,999.00\n#> 10 XLITE 06 Force AXS      €6,499.00\n#> 11 XLITE 06 Dura Ace Di2   €7,999.00\n#> 12 XLITE 06 Red eTap AXS   €8,199.00\n#> \n#> [[2]]\n#> # A tibble: 3 × 2\n#>   name                price    \n#>   <chr>               <chr>    \n#> 1 PRO SL 105          €1,099.00\n#> 2 PRO SL DISC 105     €1,699.00\n#> 3 PRO SL DISC Ultegra €1,999.00\n#> \n#> [[3]]\n#> # A tibble: 9 × 2\n#>   name                            price    \n#>   <chr>                           <chr>    \n#> 1 REVEAL FOUR DISC 105            €2,499.00\n#> 2 REVEAL FOUR DISC Ultegra        €2,799.00\n#> 3 REVEAL FOUR DISC 105 Di2        €3,299.00\n#> 4 REVEAL FOUR DISC Ultegra Di2    €3,999.00\n#> 5 REVEAL FOUR DISC Force eTap AXS €4,299.00\n#> 6 REVEAL SIX DISC Ultegra         €3,799.00\n#> 7 REVEAL SIX DISC ULTEGRA Di2     €4,799.00\n#> 8 REVEAL SIX DISC Dura Ace Di2    €6,999.00\n#> 9 REVEAL SIX DISC Red eTap AXS    €7,499.00\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}